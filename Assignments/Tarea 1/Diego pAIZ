{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNy2WT4vOLpjsujGNfih6M5",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DiegoPaiz8/IA_IB_DiegoPaiz/blob/main/Untitled0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 321
        },
        "id": "KndqGRrmxm6u",
        "outputId": "df80ed47-68fb-4aa2-9e5b-cf1b5747a302"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "UnicodeDecodeError",
          "evalue": "'utf-8' codec can't decode byte 0x92 in position 4: invalid start byte",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mUnicodeDecodeError\u001b[0m                        Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-9a1bed115e4a>\u001b[0m in \u001b[0;36m<cell line: 33>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0mfile_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/blancanieves.txt\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m \u001b[0mtext_analysis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-1-9a1bed115e4a>\u001b[0m in \u001b[0;36mtext_analysis\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mtext_analysis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m         \u001b[0mtext\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mword_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/codecs.py\u001b[0m in \u001b[0;36mdecode\u001b[0;34m(self, input, final)\u001b[0m\n\u001b[1;32m    320\u001b[0m         \u001b[0;31m# decode input (taking the buffer into account)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    321\u001b[0m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuffer\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 322\u001b[0;31m         \u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconsumed\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_buffer_decode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfinal\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    323\u001b[0m         \u001b[0;31m# keep undecoded input until the next call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    324\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuffer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mconsumed\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mUnicodeDecodeError\u001b[0m: 'utf-8' codec can't decode byte 0x92 in position 4: invalid start byte"
          ]
        }
      ],
      "source": [
        "# Text Analysis Tool\n",
        "def text_analysis(file_path):\n",
        "    with open(file_path, 'r') as file:\n",
        "        text = file.read()\n",
        "\n",
        "    word_count = len(text.split())\n",
        "    sentence_count = text.count('.') + text.count('!') + text.count('?')\n",
        "    paragraph_count = text.count('\\n\\n') + 1\n",
        "    words = text.split()\n",
        "    average_word_length = sum(len(word) for word in words) / len(words)\n",
        "    word_freq = {}\n",
        "\n",
        "    for word in words:\n",
        "        word = word.strip(\",.!?\").lower()\n",
        "        if word.isalpha():\n",
        "            if word in word_freq:\n",
        "                word_freq[word] += 1\n",
        "            else:\n",
        "                word_freq[word] = 1\n",
        "\n",
        "    most_common_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[:10]\n",
        "\n",
        "    print(\"Word count:\", word_count)\n",
        "    print(\"Sentence count:\", sentence_count)\n",
        "    print(\"Paragraph count:\", paragraph_count)\n",
        "    print(\"Average word length:\", average_word_length)\n",
        "    print(\"Most common words and their frequencies:\")\n",
        "\n",
        "    for word, freq in most_common_words:\n",
        "        print(f\"{word}: {freq}\")\n",
        "\n",
        "file_path = \"/content/blancanieves.txt\"\n",
        "text_analysis(file_path)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Hangman Game\n",
        "import random\n",
        "def choose_word():\n",
        "    words = [\"apple\", \"banana\", \"orange\", \"grape\", \"pineapple\", \"watermelon\"]\n",
        "    return random.choice(words)\n",
        "def display_word(word, guessed_letters):\n",
        "    display = \"\"\n",
        "    for letter in word:\n",
        "        if letter in guessed_letters:\n",
        "            display += letter\n",
        "        else:\n",
        "            display += \"_\"\n",
        "    return display\n",
        "def hangman():\n",
        "    max_attempts = 6\n",
        "    word = choose_word()\n",
        "    guessed_letters = []\n",
        "    attempts = 0\n",
        "    print(\"Hangman\")\n",
        "    print(\"Guess the word\")\n",
        "    while True:\n",
        "        print(display_word(word, guessed_letters))\n",
        "        guess = input(\"\\nGuess a letter: \").lower()\n",
        "        if guess in guessed_letters:\n",
        "            print(\"You've already guessed that letter. Try again.\")\n",
        "            continue\n",
        "        guessed_letters.append(guess)\n",
        "        if guess not in word:\n",
        "            attempts += 1\n",
        "            print(\"Incorrect guess.\")\n",
        "            print(f\"You have {max_attempts - attempts} attempts left.\")\n",
        "            if attempts >= max_attempts:\n",
        "                print(\"Sorry, you lost! The word was:\", word)\n",
        "                break\n",
        "        else:\n",
        "            print(\"Correct guess!\")\n",
        "            if all(letter in guessed_letters for letter in word):\n",
        "                print(\"Congratulations, you won!\")\n",
        "                break\n",
        "hangman()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u1I4OGeYx8Hv",
        "outputId": "19336fa8-2218-44cd-c849-7c4f6dc821e6"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hangman\n",
            "Guess the word\n",
            "______\n",
            "\n",
            "Guess a letter: a\n",
            "Correct guess!\n",
            "_a_a_a\n",
            "\n",
            "Guess a letter: b\n",
            "Correct guess!\n",
            "ba_a_a\n",
            "\n",
            "Guess a letter: c\n",
            "Incorrect guess.\n",
            "You have 5 attempts left.\n",
            "ba_a_a\n",
            "\n",
            "Guess a letter: t\n",
            "Incorrect guess.\n",
            "You have 4 attempts left.\n",
            "ba_a_a\n",
            "\n",
            "Guess a letter: g\n",
            "Incorrect guess.\n",
            "You have 3 attempts left.\n",
            "ba_a_a\n",
            "\n",
            "Guess a letter: h\n",
            "Incorrect guess.\n",
            "You have 2 attempts left.\n",
            "ba_a_a\n",
            "\n",
            "Guess a letter: i\n",
            "Incorrect guess.\n",
            "You have 1 attempts left.\n",
            "ba_a_a\n",
            "\n",
            "Guess a letter: w\n",
            "Incorrect guess.\n",
            "You have 0 attempts left.\n",
            "Sorry, you lost! The word was: banana\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# NUMBER GUESSING GAME\n",
        "\n",
        "import random\n",
        "7\n",
        "\n",
        "def play_guessing_game():\n",
        "\n",
        "  correct_number = random.randint(1, 100)\n",
        "\n",
        "  guess = None\n",
        "  num_guesses = 0\n",
        "\n",
        "  while guess != correct_number:\n",
        "\n",
        "    try:\n",
        "      guess = int(input(\"Guess a number between 1 and 100: \"))\n",
        "      num_guesses += 1\n",
        "    except ValueError:\n",
        "      print(\"Invalid input. Please enter a number.\")\n",
        "      continue\n",
        "\n",
        "    # Give hints based on guess\n",
        "    if guess < correct_number:\n",
        "      print(\"Too low, try again!\")\n",
        "    elif guess > correct_number:\n",
        "      print(\"Too high, try again!\")\n",
        "\n",
        "  print(f\"Congratulations! You guessed the number in {num_guesses} tries.\")\n",
        "\n",
        "play_guessing_game()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l6RN6CdVyR5T",
        "outputId": "10ab50a6-aa4a-4959-fe2e-d05fa19bab4c"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Guess a number between 1 and 100: 40\n",
            "Too low, try again!\n",
            "Guess a number between 1 and 100: 50\n",
            "Too low, try again!\n",
            "Guess a number between 1 and 100: 90\n",
            "Too high, try again!\n",
            "Guess a number between 1 and 100: 80\n",
            "Too high, try again!\n",
            "Guess a number between 1 and 100: 75\n",
            "Too high, try again!\n",
            "Guess a number between 1 and 100: 70\n",
            "Too high, try again!\n",
            "Guess a number between 1 and 100: 60\n",
            "Too low, try again!\n",
            "Guess a number between 1 and 100: 65\n",
            "Congratulations! You guessed the number in 8 tries.\n"
          ]
        }
      ]
    }
  ]
}
